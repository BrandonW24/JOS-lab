Brandon Withington
Written answers began : 5 / 10 / 2021

Question 1.) What is the purpose of having an individual handler function for each exception/interrupt? 
(i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists 
in the current implementation could not be provided?)

Answer : The purpose of having an individual handler function would be to enforce kernel protection mode.
We absolutely must avoid having users triggering particular handle functions as they could scramble and 
otherwise interfere with our kernel. Additionally, we have to give users the ability to invoke particular
interruption handlers to make syscalls more feasible. For this we have a function handler for each exception
and interruption to help  enable or disable particular privileges.

Question 2.) Did you have to do anything to make the user/softint program behave correctly? The grade 
script expects it to produce a general protection fault (trap 13), but softint’s code 
says int $14. Why should this produce interrupt vector 13? What happens if the kernel 
actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which 
is interrupt vector 14)?

Answer : I did not have to do anything specifically to softint to make it behave correctly.
The int 14 in question makes an interrupt vector because the descriptor privilege level for
our page fault handler is set to 0 which is kernel privilege. Thus when the CPU finds that
the user has called the int 14 in question it triggers a protection fault falling under trap #13. 

Question 3.)  The break point test case will either generate a break point exception or a general 
protection fault depending on how you initialized the break point entry in the IDT (i.e., your 
call to SETGATE from trap_init). Why? How do you need to set it up in order to get the 
breakpoint exception to work as specified above and what incorrect setup would cause it to 
trigger a general protection fault?


Answer : In the fashion our break point is initialized our break point entry located in IDT helps
it decide if the user mode has the correct privilege set to call the break point trap handler.
Setting DPL to 3 will help the trap handler work as it should and will allow the user to call the
trap handler as it was meant to be. Setting the DPL to an incorrect number such as 0 would not allow
the user to utilize the trap handler and may lead it to an overall general protection fault.


Question 4.) What do you think is the point of these mechanisms, particularly in light of what 
the user/softint test program does?

Answer : The point of these mechanisms is to help enforce protection and prevent any random user
from nonchalantly calling interrupt handlers that could possibly interfere with the kernel and possibly
damage it or leave it vunerable for attacks from third parties. It serves as a protective barrier to help
malicious strings of code from interrupting the kernel. 


Exercise 9 : Finally, change debuginfo_eip() in kern/kdebug.c to call user_mem_check() on usd, stabs, and stabstr. 
If you now run user/breakpoint, you should be able to run backtrace from the kernel monitor and 
see the backtrace traverse into lib/libmain.c before the kernel panics with a page fault. What 
causes this page fault? You don’t need to fix it, but you should understand why it happens.

Answer : The kernel page fault happens because our mon_backtrace function searches backwards nonstop until it
hits a dereferenced pointer not within the user stack. It hits a zone of memory it should not access and faults.